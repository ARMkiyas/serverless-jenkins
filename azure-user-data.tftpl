#! /bin/bash

userfolder="/home/${username}"
PATH_FILE_SHARE="/mnt/cloudfile"

sudo su ${username}

cd $${userfolder}

sudo apt-get update
sudo apt-get upgrade -y

echo ${jenkins_admin_password} > hallo.txt

#uninstall all conflicting packages
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done

# Add Docker's official GPG key:
sudo apt-get install ca-certificates curl -y
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update


# Install Docker
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin cifs-utils -y 


# Create directories for file share and credentials
sudo mkdir -p $${PATH_FILE_SHARE}
sudo mkdir -p /etc/.smbcredentials
if [ ! -f "/etc/.smbcredentials/${account_name}.cred" ]; then
    sudo bash -c "echo \"username=${account_name}\" >> /etc/.smbcredentials/${account_name}.cred"
    sudo bash -c "echo \"password=${storage_acc_key}\" >> /etc/.smbcredentials/${account_name}.cred"
fi
sudo chmod 600 /etc/.smbcredentials/${account_name}.cred


%{ for key, value in file_share }

  SHARE_PATH="$${PATH_FILE_SHARE}/${key}"
  sudo mkdir -p $${SHARE_PATH}
  if ! grep -qs "$${SHARE_PATH}" /proc/mounts; then
      sudo bash -c "echo \"//${account_name}.file.core.windows.net/${value} $${SHARE_PATH} cifs nofail,credentials=/etc/.smbcredentials/${account_name}.cred,dir_mode=0777,file_mode=0777,serverino,nosharesock,actimeo=30\" >> /etc/fstab"
      sudo mount -t cifs //${account_name}.file.core.windows.net/${value} $${SHARE_PATH} -o credentials=/etc/.smbcredentials/${account_name}.cred,dir_mode=0777,file_mode=0777,serverino,nosharesock,actimeo=30
  fi
%{ endfor ~}

# Generate Docker Compose YAML dynamically
DOCKER_COMPOSE_FILE="$${userfolder}/docker-compose.yml"

cat <<EOF > $${DOCKER_COMPOSE_FILE}
version: "3.8"

services:
  jenkins:
    image: public.ecr.aws/r1c6q1b8/jenkins-master:latest
    environment:
      - BUILD_ID=$${BUILD_ID:-"0.0.0.0-dev"}
      - JAVA_OPTS=-Dhudson.footerURL=https://www.kiyas-cloud.live/ -Djenkins.install.runSetupWizard=false -Djenkins.telemetry.enabled=false -Dhudson.remoting.ClassFilter=java.security.KeyPair,sun.security.rsa.RSAPrivateCrtKeyImpl -Dpermissive-script-security.enabled=true -Djdk.tls.client.protocols=TLSv1.2 -javaagent:/usr/share/jenkins/jmx_prometheus_javaagent.jar=8081:/var/jenkins_home/prometheus-jmx-config.yaml -Xms3g -Xmx3g -XX:MetaspaceSize=1024m -XX:MaxMetaspaceExpansion=128m -XX:MaxMetaspaceSize=2048m -Xss2048k -XX:MaxDirectMemorySize=512m
      - PROMETHEUS_JMX_JAR_VERSION=0.19.0
      - PORT=8080
      - JENKINS_HOSTNAME=${host_name}
      - JENKINS_ADMIN_PASSWORD=\$${JENKINS_ADMIN_PASSWORD}
    volumes:
EOF

%{ for key, value in file_share }

   if [ "$key" != "caddy" ]; then
    SHARE_PATH="$${PATH_FILE_SHARE}/${key}"
    echo "      - $${SHARE_PATH}:/var/jenkins_home/${key}" >> $${DOCKER_COMPOSE_FILE}
  fi
    
%{ endfor ~}


# Complete Jenkins service and add Caddy service
cat <<EOF >> $${DOCKER_COMPOSE_FILE}
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "curl --fail ${host_name}/login?from=login || exit 1"]
      interval: 1m
      timeout: 10s
      retries: 3

  caddy:
    image: caddy
    container_name: caddy
    restart: always
    ports:
      - 80:80
      - 443:443
    links:
      - "jenkins"
    volumes:
      - $${PATH_FILE_SHARE}/caddy:/data
    command: >
      sh -c "caddy reverse-proxy --from ${host_name} --to jenkins:8080"

networks:
  caddy_proxy:
    external: true
EOF


# add environment variables to .env file

cat <<EOF > $${userfolder}/.env 
JENKINS_ADMIN_PASSWORD=${jenkins_admin_password}
EOF

chmod 600 $${userfolder}/.env

# Start the Jenkins server adn Caddy reverse proxy
sudo docker compose up -d


